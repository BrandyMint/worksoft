# -*- coding: utf-8 -*-
class UserSystemDecorator < Draper::Base
  decorates :user_system

  def to_s
    if model.complete?
      kernel_version << configuration_detailed
    else
      h.content_tag :span, :class => 'label label-important' do
        'Конфигурация 1C не установлена'
      end
    end
  end

  def edit_url
    persisted? ? h.edit_user_system_path(model) : h.new_user_system_path(:user_system => model)
  end

  def action
    persisted? && complete? ? 'Изменить конфигурацию' : 'Установить'
  end

  def kernel_version
    if model.kernel_version.present?
      h.content_tag :span, model.kernel_version, :class => 'version-support-kernel'
    else
      h.content_tag :span, '???', :class => 'version-support-kernel',
        :rel => :tooltip, :title => 'Не установлен номер версии 1С', :data => { :placement => :left }
    end
  end

  def configuration
    model.configuration.present? ? model.configuration : '????????'
  end

  def configuration_version
    model.configuration_version.present? ? model.configuration_version : '???'
  end

  def configuration_detailed
    if model.configuration.present? && model.configuration_version.present?
      h.content_tag :span, :class => 'version-support-configs' do
        "#{h.truncate(model.configuration.to_s)} #{model.configuration_version}"
      end
    else
      h.content_tag :span, '???', :class => 'version-support-kernel',
        :rel => :tooltip, :title => 'Не установлена конфигурация и ее версия', :data => { :placement => :right }
    end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
